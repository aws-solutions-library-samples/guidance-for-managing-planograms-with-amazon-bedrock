"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.PlanogramDynamoStack = void 0;
const cdk = require("aws-cdk-lib");
const dynamodb = require("aws-cdk-lib/aws-dynamodb");
const ssm = require("aws-cdk-lib/aws-ssm");
const aws_cdk_lib_1 = require("aws-cdk-lib");
const cr = require("aws-cdk-lib/custom-resources");
const fs = require("fs");
class PlanogramDynamoStack extends cdk.Stack {
    constructor(scope, id, props) {
        super(scope, id, props);
        const dynamodbData = JSON.parse(fs.readFileSync('../dynamodb_data.json', 'utf-8'));
        for (const [tableName, tableInfo] of Object.entries(dynamodbData)) {
            const metadata = tableInfo.metadata;
            const items = tableInfo.items;
            const table = new dynamodb.Table(this, `${id}-${tableName}`, {
                tableName: metadata.TableName,
                partitionKey: {
                    name: metadata.KeySchema[0].AttributeName,
                    type: this.getAttributeType(metadata.AttributeDefinitions[0].AttributeType)
                },
                billingMode: metadata.BillingMode === 'PAY_PER_REQUEST'
                    ? dynamodb.BillingMode.PAY_PER_REQUEST
                    : dynamodb.BillingMode.PROVISIONED,
                removalPolicy: aws_cdk_lib_1.RemovalPolicy.DESTROY,
            });
            // Insert data using Custom Resource
            new cr.AwsCustomResource(this, `InsertData-${tableName}`, {
                onCreate: {
                    service: 'DynamoDB',
                    action: 'batchWriteItem',
                    parameters: {
                        RequestItems: {
                            [tableName]: items.map((item) => ({
                                PutRequest: {
                                    Item: item
                                }
                            }))
                        }
                    },
                    physicalResourceId: cr.PhysicalResourceId.of(`InsertData-${tableName}`)
                },
                policy: cr.AwsCustomResourcePolicy.fromSdkCalls({
                    resources: [table.tableArn]
                })
            });
        }
        const parameters = JSON.parse(fs.readFileSync('../ssm_parameters.json', 'utf-8'));
        parameters.forEach((param) => {
            new ssm.StringParameter(this, `Parameter-${param.Name}`, {
                parameterName: param.Name,
                stringValue: param.Value,
                type: param.Type === 'SecureString' ? ssm.ParameterType.SECURE_STRING : ssm.ParameterType.STRING,
            });
        });
    }
    getAttributeType(type) {
        switch (type) {
            case 'S': return dynamodb.AttributeType.STRING;
            case 'N': return dynamodb.AttributeType.NUMBER;
            case 'B': return dynamodb.AttributeType.BINARY;
            default: throw new Error(`Unsupported attribute type: ${type}`);
        }
    }
}
exports.PlanogramDynamoStack = PlanogramDynamoStack;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicGxhbm9ncmFtLWR5bmFtby1zdGFjay5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbInBsYW5vZ3JhbS1keW5hbW8tc3RhY2sudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7O0FBQUEsbUNBQW1DO0FBQ25DLHFEQUFxRDtBQUNyRCwyQ0FBMkM7QUFDM0MsNkNBQTRDO0FBQzVDLG1EQUFtRDtBQUVuRCx5QkFBeUI7QUFFekIsTUFBYSxvQkFBcUIsU0FBUSxHQUFHLENBQUMsS0FBSztJQUNqRCxZQUFZLEtBQWdCLEVBQUUsRUFBVSxFQUFFLEtBQXNCO1FBQzlELEtBQUssQ0FBQyxLQUFLLEVBQUUsRUFBRSxFQUFFLEtBQUssQ0FBQyxDQUFDO1FBRXhCLE1BQU0sWUFBWSxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsRUFBRSxDQUFDLFlBQVksQ0FBQyx1QkFBdUIsRUFBRSxPQUFPLENBQUMsQ0FBQyxDQUFDO1FBRW5GLEtBQUssTUFBTSxDQUFDLFNBQVMsRUFBRSxTQUFTLENBQUMsSUFBSSxNQUFNLENBQUMsT0FBTyxDQUFDLFlBQVksQ0FBQyxFQUFFLENBQUM7WUFDbEUsTUFBTSxRQUFRLEdBQUksU0FBaUIsQ0FBQyxRQUFRLENBQUM7WUFDN0MsTUFBTSxLQUFLLEdBQUksU0FBaUIsQ0FBQyxLQUFLLENBQUM7WUFFdkMsTUFBTSxLQUFLLEdBQUcsSUFBSSxRQUFRLENBQUMsS0FBSyxDQUFDLElBQUksRUFBRSxHQUFHLEVBQUUsSUFBSSxTQUFTLEVBQUUsRUFBRTtnQkFDM0QsU0FBUyxFQUFFLFFBQVEsQ0FBQyxTQUFTO2dCQUM3QixZQUFZLEVBQUU7b0JBQ1osSUFBSSxFQUFFLFFBQVEsQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDLENBQUMsYUFBYTtvQkFDekMsSUFBSSxFQUFFLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxRQUFRLENBQUMsb0JBQW9CLENBQUMsQ0FBQyxDQUFDLENBQUMsYUFBYSxDQUFDO2lCQUM1RTtnQkFDRCxXQUFXLEVBQUUsUUFBUSxDQUFDLFdBQVcsS0FBSyxpQkFBaUI7b0JBQ3JELENBQUMsQ0FBQyxRQUFRLENBQUMsV0FBVyxDQUFDLGVBQWU7b0JBQ3RDLENBQUMsQ0FBQyxRQUFRLENBQUMsV0FBVyxDQUFDLFdBQVc7Z0JBQ3BDLGFBQWEsRUFBRSwyQkFBYSxDQUFDLE9BQU87YUFDckMsQ0FBQyxDQUFDO1lBQ0gsb0NBQW9DO1lBQ3BDLElBQUksRUFBRSxDQUFDLGlCQUFpQixDQUFDLElBQUksRUFBRSxjQUFjLFNBQVMsRUFBRSxFQUFFO2dCQUN4RCxRQUFRLEVBQUU7b0JBQ1IsT0FBTyxFQUFFLFVBQVU7b0JBQ25CLE1BQU0sRUFBRSxnQkFBZ0I7b0JBQ3hCLFVBQVUsRUFBRTt3QkFDVixZQUFZLEVBQUU7NEJBQ1osQ0FBQyxTQUFTLENBQUMsRUFBRSxLQUFLLENBQUMsR0FBRyxDQUFDLENBQUMsSUFBUyxFQUFFLEVBQUUsQ0FBQyxDQUFDO2dDQUNyQyxVQUFVLEVBQUU7b0NBQ1YsSUFBSSxFQUFFLElBQUk7aUNBQ1g7NkJBQ0YsQ0FBQyxDQUFDO3lCQUNKO3FCQUNGO29CQUNELGtCQUFrQixFQUFFLEVBQUUsQ0FBQyxrQkFBa0IsQ0FBQyxFQUFFLENBQUMsY0FBYyxTQUFTLEVBQUUsQ0FBQztpQkFDeEU7Z0JBQ0QsTUFBTSxFQUFFLEVBQUUsQ0FBQyx1QkFBdUIsQ0FBQyxZQUFZLENBQUM7b0JBQzlDLFNBQVMsRUFBRSxDQUFDLEtBQUssQ0FBQyxRQUFRLENBQUM7aUJBQzVCLENBQUM7YUFDSCxDQUFDLENBQUM7UUFDTCxDQUFDO1FBQ0QsTUFBTSxVQUFVLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxFQUFFLENBQUMsWUFBWSxDQUFDLHdCQUF3QixFQUFFLE9BQU8sQ0FBQyxDQUFDLENBQUM7UUFFbEYsVUFBVSxDQUFDLE9BQU8sQ0FBQyxDQUFDLEtBQVUsRUFBRSxFQUFFO1lBQ2hDLElBQUksR0FBRyxDQUFDLGVBQWUsQ0FBQyxJQUFJLEVBQUUsYUFBYSxLQUFLLENBQUMsSUFBSSxFQUFFLEVBQUU7Z0JBQ3ZELGFBQWEsRUFBRSxLQUFLLENBQUMsSUFBSTtnQkFDekIsV0FBVyxFQUFFLEtBQUssQ0FBQyxLQUFLO2dCQUN4QixJQUFJLEVBQUUsS0FBSyxDQUFDLElBQUksS0FBSyxjQUFjLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxhQUFhLENBQUMsYUFBYSxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsYUFBYSxDQUFDLE1BQU07YUFDakcsQ0FBQyxDQUFDO1FBQ0wsQ0FBQyxDQUFDLENBQUM7SUFDTCxDQUFDO0lBRU8sZ0JBQWdCLENBQUMsSUFBWTtRQUNuQyxRQUFRLElBQUksRUFBRSxDQUFDO1lBQ2IsS0FBSyxHQUFHLENBQUMsQ0FBQyxPQUFPLFFBQVEsQ0FBQyxhQUFhLENBQUMsTUFBTSxDQUFDO1lBQy9DLEtBQUssR0FBRyxDQUFDLENBQUMsT0FBTyxRQUFRLENBQUMsYUFBYSxDQUFDLE1BQU0sQ0FBQztZQUMvQyxLQUFLLEdBQUcsQ0FBQyxDQUFDLE9BQU8sUUFBUSxDQUFDLGFBQWEsQ0FBQyxNQUFNLENBQUM7WUFDL0MsT0FBTyxDQUFDLENBQUMsTUFBTSxJQUFJLEtBQUssQ0FBQywrQkFBK0IsSUFBSSxFQUFFLENBQUMsQ0FBQztRQUNsRSxDQUFDO0lBQ0gsQ0FBQztDQUNGO0FBN0RELG9EQTZEQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCAqIGFzIGNkayBmcm9tICdhd3MtY2RrLWxpYic7XG5pbXBvcnQgKiBhcyBkeW5hbW9kYiBmcm9tICdhd3MtY2RrLWxpYi9hd3MtZHluYW1vZGInO1xuaW1wb3J0ICogYXMgc3NtIGZyb20gJ2F3cy1jZGstbGliL2F3cy1zc20nO1xuaW1wb3J0IHsgUmVtb3ZhbFBvbGljeSB9IGZyb20gJ2F3cy1jZGstbGliJztcbmltcG9ydCAqIGFzIGNyIGZyb20gJ2F3cy1jZGstbGliL2N1c3RvbS1yZXNvdXJjZXMnO1xuaW1wb3J0IHsgQ29uc3RydWN0IH0gZnJvbSAnY29uc3RydWN0cyc7XG5pbXBvcnQgKiBhcyBmcyBmcm9tICdmcyc7XG5cbmV4cG9ydCBjbGFzcyBQbGFub2dyYW1EeW5hbW9TdGFjayBleHRlbmRzIGNkay5TdGFjayB7XG4gIGNvbnN0cnVjdG9yKHNjb3BlOiBDb25zdHJ1Y3QsIGlkOiBzdHJpbmcsIHByb3BzPzogY2RrLlN0YWNrUHJvcHMpIHtcbiAgICBzdXBlcihzY29wZSwgaWQsIHByb3BzKTtcblxuICAgIGNvbnN0IGR5bmFtb2RiRGF0YSA9IEpTT04ucGFyc2UoZnMucmVhZEZpbGVTeW5jKCcuLi9keW5hbW9kYl9kYXRhLmpzb24nLCAndXRmLTgnKSk7XG5cbiAgICBmb3IgKGNvbnN0IFt0YWJsZU5hbWUsIHRhYmxlSW5mb10gb2YgT2JqZWN0LmVudHJpZXMoZHluYW1vZGJEYXRhKSkge1xuICAgICAgY29uc3QgbWV0YWRhdGEgPSAodGFibGVJbmZvIGFzIGFueSkubWV0YWRhdGE7XG4gICAgICBjb25zdCBpdGVtcyA9ICh0YWJsZUluZm8gYXMgYW55KS5pdGVtcztcblxuICAgICAgY29uc3QgdGFibGUgPSBuZXcgZHluYW1vZGIuVGFibGUodGhpcywgYCR7aWR9LSR7dGFibGVOYW1lfWAsIHtcbiAgICAgICAgdGFibGVOYW1lOiBtZXRhZGF0YS5UYWJsZU5hbWUsXG4gICAgICAgIHBhcnRpdGlvbktleToge1xuICAgICAgICAgIG5hbWU6IG1ldGFkYXRhLktleVNjaGVtYVswXS5BdHRyaWJ1dGVOYW1lLFxuICAgICAgICAgIHR5cGU6IHRoaXMuZ2V0QXR0cmlidXRlVHlwZShtZXRhZGF0YS5BdHRyaWJ1dGVEZWZpbml0aW9uc1swXS5BdHRyaWJ1dGVUeXBlKVxuICAgICAgICB9LFxuICAgICAgICBiaWxsaW5nTW9kZTogbWV0YWRhdGEuQmlsbGluZ01vZGUgPT09ICdQQVlfUEVSX1JFUVVFU1QnIFxuICAgICAgICAgID8gZHluYW1vZGIuQmlsbGluZ01vZGUuUEFZX1BFUl9SRVFVRVNUIFxuICAgICAgICAgIDogZHluYW1vZGIuQmlsbGluZ01vZGUuUFJPVklTSU9ORUQsXG4gICAgICAgIHJlbW92YWxQb2xpY3k6IFJlbW92YWxQb2xpY3kuREVTVFJPWSxcbiAgICAgIH0pO1xuICAgICAgLy8gSW5zZXJ0IGRhdGEgdXNpbmcgQ3VzdG9tIFJlc291cmNlXG4gICAgICBuZXcgY3IuQXdzQ3VzdG9tUmVzb3VyY2UodGhpcywgYEluc2VydERhdGEtJHt0YWJsZU5hbWV9YCwge1xuICAgICAgICBvbkNyZWF0ZToge1xuICAgICAgICAgIHNlcnZpY2U6ICdEeW5hbW9EQicsXG4gICAgICAgICAgYWN0aW9uOiAnYmF0Y2hXcml0ZUl0ZW0nLFxuICAgICAgICAgIHBhcmFtZXRlcnM6IHtcbiAgICAgICAgICAgIFJlcXVlc3RJdGVtczoge1xuICAgICAgICAgICAgICBbdGFibGVOYW1lXTogaXRlbXMubWFwKChpdGVtOiBhbnkpID0+ICh7XG4gICAgICAgICAgICAgICAgUHV0UmVxdWVzdDoge1xuICAgICAgICAgICAgICAgICAgSXRlbTogaXRlbVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgfSkpXG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSxcbiAgICAgICAgICBwaHlzaWNhbFJlc291cmNlSWQ6IGNyLlBoeXNpY2FsUmVzb3VyY2VJZC5vZihgSW5zZXJ0RGF0YS0ke3RhYmxlTmFtZX1gKVxuICAgICAgICB9LFxuICAgICAgICBwb2xpY3k6IGNyLkF3c0N1c3RvbVJlc291cmNlUG9saWN5LmZyb21TZGtDYWxscyh7XG4gICAgICAgICAgcmVzb3VyY2VzOiBbdGFibGUudGFibGVBcm5dXG4gICAgICAgIH0pXG4gICAgICB9KTtcbiAgICB9XG4gICAgY29uc3QgcGFyYW1ldGVycyA9IEpTT04ucGFyc2UoZnMucmVhZEZpbGVTeW5jKCcuLi9zc21fcGFyYW1ldGVycy5qc29uJywgJ3V0Zi04JykpO1xuXG4gICAgcGFyYW1ldGVycy5mb3JFYWNoKChwYXJhbTogYW55KSA9PiB7XG4gICAgICBuZXcgc3NtLlN0cmluZ1BhcmFtZXRlcih0aGlzLCBgUGFyYW1ldGVyLSR7cGFyYW0uTmFtZX1gLCB7XG4gICAgICAgIHBhcmFtZXRlck5hbWU6IHBhcmFtLk5hbWUsXG4gICAgICAgIHN0cmluZ1ZhbHVlOiBwYXJhbS5WYWx1ZSxcbiAgICAgICAgdHlwZTogcGFyYW0uVHlwZSA9PT0gJ1NlY3VyZVN0cmluZycgPyBzc20uUGFyYW1ldGVyVHlwZS5TRUNVUkVfU1RSSU5HIDogc3NtLlBhcmFtZXRlclR5cGUuU1RSSU5HLFxuICAgICAgfSk7XG4gICAgfSk7XG4gIH1cbiAgXG4gIHByaXZhdGUgZ2V0QXR0cmlidXRlVHlwZSh0eXBlOiBzdHJpbmcpOiBkeW5hbW9kYi5BdHRyaWJ1dGVUeXBlIHtcbiAgICBzd2l0Y2ggKHR5cGUpIHtcbiAgICAgIGNhc2UgJ1MnOiByZXR1cm4gZHluYW1vZGIuQXR0cmlidXRlVHlwZS5TVFJJTkc7XG4gICAgICBjYXNlICdOJzogcmV0dXJuIGR5bmFtb2RiLkF0dHJpYnV0ZVR5cGUuTlVNQkVSO1xuICAgICAgY2FzZSAnQic6IHJldHVybiBkeW5hbW9kYi5BdHRyaWJ1dGVUeXBlLkJJTkFSWTtcbiAgICAgIGRlZmF1bHQ6IHRocm93IG5ldyBFcnJvcihgVW5zdXBwb3J0ZWQgYXR0cmlidXRlIHR5cGU6ICR7dHlwZX1gKTtcbiAgICB9XG4gIH1cbn1cbiJdfQ==